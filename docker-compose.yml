services:
  kafka:
    image: bitnami/kafka:3.5
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - kafka-net

  producer:
    build: ./producer
    container_name: producer
    depends_on:
      - kafka
    restart: on-failure
    networks:
      - kafka-net

  spark-job:
    build: ./spark
    container_name: spark-job
    depends_on:
      - kafka
    networks:
      - kafka-net
    volumes:
      - ./parquet_data:/tmp/fraud_alerts_parquet

  kafdrop:
    image: obsidiandynamics/kafdrop:latest
    container_name: kafdrop
    depends_on:
      - kafka
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: kafka:9092
    networks:
      - kafka-net

  dashboard:
    build: ./dashboard
    container_name: dashboard
    ports:
      - "8501:8501"
    depends_on:
      - spark-job
    volumes:
      - ./parquet_data:/parquet_data
    networks:
      - kafka-net

volumes:
  kafka_data:

networks:
  kafka-net:
    driver: bridge
